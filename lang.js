/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lang = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Form":3,"EOF":4,"FORM":5,"OPEN_BRACE":6,"Descriptors":7,"Fields":8,"CLOSE_BRACE":9,"Descriptor":10,"NAME":11,"EQUAL":12,"Literal":13,"PlainDescriptors":14,"PlainDescriptor":15,"FIELDS":16,"FieldList":17,"Field":18,"INPUT":19,"Validators":20,"TEXTAREA":21,"SELECT":22,"CHECKBOX":23,"RADIO":24,"SUBMIT":25,"STATIC":26,"BracedContent":27,"STATIC_NO_WRAP":28,"BRACED_PART":29,"VALIDATORS":30,"ValidatorList":31,"Validator":32,"Arguments":33,"String":34,"OPEN_PAREN":35,"ArgumentList":36,"CLOSE_PAREN":37,"Argument":38,"COMMA":39,"NUMBER":40,"BOOLEAN":41,"STRING":42,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",5:"FORM",6:"OPEN_BRACE",9:"CLOSE_BRACE",11:"NAME",12:"EQUAL",16:"FIELDS",19:"INPUT",21:"TEXTAREA",22:"SELECT",23:"CHECKBOX",24:"RADIO",25:"SUBMIT",26:"STATIC",28:"STATIC_NO_WRAP",29:"BRACED_PART",30:"VALIDATORS",35:"OPEN_PAREN",37:"CLOSE_PAREN",39:"COMMA",40:"NUMBER",41:"BOOLEAN",42:"STRING"},
productions_: [0,[3,1],[3,5],[7,0],[7,2],[10,3],[10,5],[10,4],[14,0],[14,2],[15,3],[8,0],[8,2],[17,0],[17,2],[18,6],[18,6],[18,6],[18,6],[18,6],[18,4],[18,2],[18,2],[27,1],[27,2],[20,0],[20,4],[31,0],[31,2],[32,4],[33,0],[33,3],[36,0],[36,1],[36,3],[38,1],[38,1],[13,1],[13,1],[13,1],[34,0],[34,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new Form([], []); 
break;
case 2: return new Form($$[$0-2], $$[$0-1]); 
break;
case 3: this.$ = []; 
break;
case 4: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 5: this.$ = new FDescriptor($$[$0-2], $$[$0]); 
break;
case 6: this.$ = new FDescriptor($$[$0-4], $$[$0-1]); 
break;
case 7: this.$ = new FDescriptor($$[$0-3], $$[$0-1]); 
break;
case 8: this.$ = []; 
break;
case 9: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 10: this.$ = new FDescriptor($$[$0-2], $$[$0]); 
break;
case 11: this.$ = []; 
break;
case 12: this.$ = $$[$0] 
break;
case 13: this.$ = []; 
break;
case 14: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 15: this.$ = new FInput($$[$0-4], $$[$0-2], $$[$0-1]); 
break;
case 16: this.$ = new FTextarea($$[$0-4], $$[$0-2], $$[$0-1]); 
break;
case 17: this.$ = new FSelect($$[$0-4], $$[$0-2], $$[$0-1]); 
break;
case 18: this.$ = new FCheckbox($$[$0-4], $$[$0-2], $$[$0-1]); 
break;
case 19: this.$ = new FRadio($$[$0-4], $$[$0-2], $$[$0-1]); 
break;
case 20: this.$ = new FSubmit($$[$0-1]); 
break;
case 21: this.$ = new FStatic($$[$0].join('')); 
break;
case 22: this.$ = new FStaticNoWrap($$[$0].join('')); 
break;
case 23: this.$ = [$$[$0]]; 
break;
case 24: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 25: this.$ = []; 
break;
case 26: this.$ = $$[$0-1]; 
break;
case 27: this.$ = []; 
break;
case 28: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 29: this.$ = new FValidator($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 30: this.$ = []; 
break;
case 31: this.$ = $$[$0-1]; 
break;
case 32: this.$ = []; 
break;
case 33: this.$ = [$$[$0]]; 
break;
case 34: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 40: this.$ = ''; 
break;
case 41: this.$ = $$[$0-1] + $$[$0]; 
break;
}
},
table: [{3:1,4:[1,2],5:[1,3]},{1:[3]},{1:[2,1]},{6:[1,4]},{7:5,9:[2,3],10:6,11:[1,7],16:[2,3]},{8:8,9:[2,11],16:[1,9]},{7:10,9:[2,3],10:6,11:[1,7],16:[2,3],30:[2,3]},{6:[1,12],12:[1,11]},{9:[1,13]},{9:[2,13],17:14,18:15,19:[1,16],21:[1,17],22:[1,18],23:[1,19],24:[1,20],25:[1,21],26:[1,22],28:[1,23]},{9:[2,4],16:[2,4],30:[2,4]},{6:[1,25],9:[2,40],11:[2,40],13:24,16:[2,40],30:[2,40],34:26,40:[1,27],41:[1,28],42:[1,29]},{9:[2,8],11:[1,32],14:30,15:31},{1:[2,2]},{9:[2,12]},{9:[2,13],17:33,18:15,19:[1,16],21:[1,17],22:[1,18],23:[1,19],24:[1,20],25:[1,21],26:[1,22],28:[1,23]},{11:[1,34]},{11:[1,35]},{11:[1,36]},{11:[1,37]},{11:[1,38]},{6:[1,39]},{27:40,29:[1,41]},{27:42,29:[1,41]},{9:[2,5],11:[2,5],16:[2,5],30:[2,5]},{9:[2,8],11:[1,32],14:43,15:31},{9:[2,37],11:[2,37],16:[2,37],30:[2,37]},{9:[2,38],11:[2,38],16:[2,38],30:[2,38]},{9:[2,39],11:[2,39],16:[2,39],30:[2,39]},{9:[2,40],11:[2,40],16:[2,40],30:[2,40],34:44,37:[2,40],39:[2,40],42:[1,29]},{9:[1,45]},{9:[2,8],11:[1,32],14:46,15:31},{12:[1,47]},{9:[2,14]},{6:[1,48]},{6:[1,49]},{6:[1,50]},{6:[1,51]},{6:[1,52]},{7:53,9:[2,3],10:6,11:[1,7]},{9:[2,21],19:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],28:[2,21]},{9:[2,23],19:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:54,28:[2,23],29:[1,41]},{9:[2,22],19:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],28:[2,22]},{9:[1,55]},{9:[2,41],11:[2,41],16:[2,41],30:[2,41],37:[2,41],39:[2,41]},{9:[2,7],11:[2,7],16:[2,7],30:[2,7]},{9:[2,9]},{9:[2,40],11:[2,40],13:56,34:26,40:[1,27],41:[1,28],42:[1,29]},{7:57,9:[2,3],10:6,11:[1,7],30:[2,3]},{7:58,9:[2,3],10:6,11:[1,7],30:[2,3]},{7:59,9:[2,3],10:6,11:[1,7],30:[2,3]},{7:60,9:[2,3],10:6,11:[1,7],30:[2,3]},{7:61,9:[2,3],10:6,11:[1,7],30:[2,3]},{9:[1,62]},{9:[2,24],19:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],28:[2,24]},{9:[2,6],11:[2,6],16:[2,6],30:[2,6]},{9:[2,10],11:[2,10]},{9:[2,25],20:63,30:[1,64]},{9:[2,25],20:65,30:[1,64]},{9:[2,25],20:66,30:[1,64]},{9:[2,25],20:67,30:[1,64]},{9:[2,25],20:68,30:[1,64]},{9:[2,20],19:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],28:[2,20]},{9:[1,69]},{6:[1,70]},{9:[1,71]},{9:[1,72]},{9:[1,73]},{9:[1,74]},{9:[2,15],19:[2,15],21:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],28:[2,15]},{9:[2,27],11:[1,77],31:75,32:76},{9:[2,16],19:[2,16],21:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],28:[2,16]},{9:[2,17],19:[2,17],21:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],28:[2,17]},{9:[2,18],19:[2,18],21:[2,18],22:[2,18],23:[2,18],24:[2,18],25:[2,18],26:[2,18],28:[2,18]},{9:[2,19],19:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],28:[2,19]},{9:[1,78]},{9:[2,27],11:[1,77],31:79,32:76},{12:[2,30],33:80,35:[1,81]},{9:[2,26]},{9:[2,28]},{12:[1,82]},{34:85,36:83,37:[2,32],38:84,39:[2,32],40:[1,86],42:[1,29]},{9:[2,40],11:[2,40],34:87,42:[1,29]},{37:[1,88]},{37:[2,33],39:[1,89]},{37:[2,35],39:[2,35]},{37:[2,36],39:[2,36]},{9:[2,29],11:[2,29]},{12:[2,31]},{34:85,36:90,37:[2,32],38:84,39:[2,32],40:[1,86],42:[1,29]},{37:[2,34]}],
defaultActions: {2:[2,1],13:[2,2],14:[2,12],33:[2,14],46:[2,9],78:[2,26],79:[2,28],88:[2,31],90:[2,34]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  function Form(descriptors, fields) {
    this.descriptors = descriptors;
    this.fields = fields;
  }

  function FDescriptor(key, value) {
    this.key = key;
    this.value = value;
  }

  function FInput(name, descriptors, validators) {
    this.type = 'input';
    this.name = name;
    this.descriptors = descriptors;
    this.validators = validators;
  }

  function FTextarea(name, descriptors, validators) {
    this.type = 'textarea';
    this.name = name;
    this.descriptors = descriptors;
    this.validators = validators;
  }

  function FSelect(name, descriptors, validators) {
    this.type = 'select';
    this.name = name;
    this.descriptors = descriptors;
    this.validators = validators;
  }

  function FCheckbox(name, descriptors, validators) {
    this.type = 'checkbox';
    this.name = name;
    this.descriptors = descriptors;
    this.validators = validators;
  }

  function FRadio(name, descriptors, validators) {
    this.type = 'radio';
    this.name = name;
    this.descriptors = descriptors;
    this.validators = validators;
  }

  function FSubmit(descriptors) {
    this.type = 'submit';
    this.descriptors = descriptors;
  }

  function FStatic(content) {
    this.type = 'static';
    this.content = content;
  }

  function FStaticNoWrap(content) {
    this.type = 'static-no-wrap';
    this.content = content;
  }

  function FValidator(name, arguments, message) {
    this.name = name;
    this.arguments = arguments;
    this.message = message;
  }


function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lang;
exports.Parser = lang.Parser;
exports.parse = function () { return lang.parse.apply(lang, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}